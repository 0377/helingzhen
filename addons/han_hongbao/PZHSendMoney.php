<?php 

include_once("CommonUtil.php"); include_once("MD5SignUtil.php"); class PZHSend { private $password=''; var $parameters; public function pay($uniacid,$re_openid,$nick_name,$send_name,$total_amount,$wishing,$act_name,$remark,$mchid,$appid,$password) { include_once('WxHongBaoHelper.php'); $commonUtil = new CommonUtil(); $this->password = $password; $this->setParameter("nonce_str", $commonUtil->create_noncestr()); $this->setParameter("mch_billno", $mchid.date('YmdHis').rand(1000, 9999)); $this->setParameter("mch_id", $mchid); $this->setParameter("wxappid", $appid); $this->setParameter("nick_name", $nick_name); $this->setParameter("send_name", $send_name); $this->setParameter("re_openid", $re_openid); $this->setParameter("total_amount",$total_amount); $this->setParameter("min_value", $total_amount); $this->setParameter("max_value", $total_amount); $this->setParameter("total_num", 1); $this->setParameter("wishing", $wishing); $this->setParameter("client_ip", '127.0.0.1'); $this->setParameter("act_name", $act_name); $this->setParameter("remark", $remark); $postXml = $this->create_hongbao_xml(); $url = 'https://api.mch.weixin.qq.com/mmpaymkttransfers/sendredpack'; $responseXml = $this->curl_post_ssll($url, $postXml,$uniacid); $result= simplexml_load_string($responseXml, 'SimpleXMLElement', LIBXML_NOCDATA); var_dump($result);var_dump($postXml); return $result; } function create_hongbao_xml($retcode = 0, $reterrmsg = "ok") { $this->setParameter('sign', $this->get_sign()); $commonUtil = new CommonUtil(); $tmp= $commonUtil->arrayToXml($this->parameters); return $tmp; } function get_sign() { define('PARTNERKEY',$this->password ); if (null == PARTNERKEY || "" == PARTNERKEY ) { message('PARTNERKEY为空','','error'); return false; } if($this->check_sign_parameters() == false) { message('签名参数有误','','error'); return false; } $commonUtil = new CommonUtil(); ksort($this->parameters); $unSignParaString = $commonUtil->formatQueryParaMap($this->parameters, false); $md5SignUtil = new MD5SignUtil(); return $this->sign($unSignParaString,$commonUtil->trimString(PARTNERKEY)); } function curl_post_ssl($url, $vars, $second=30,$aHeader=array()) { global $_W; $ch = curl_init(); curl_setopt($ch,CURLOPT_TIMEOUT,$second); curl_setopt($ch,CURLOPT_RETURNTRANSFER, 1); curl_setopt($ch,CURLOPT_URL,$url); curl_setopt($ch,CURLOPT_SSL_VERIFYPEER,false); curl_setopt($ch,CURLOPT_SSL_VERIFYHOST,false); curl_setopt($ch,CURLOPT_SSLCERT,dirname(__FILE__).DIRECTORY_SEPARATOR.'cert'.DIRECTORY_SEPARATOR.'apiclient_cert.pem.'.$_W['uniacid']); curl_setopt($ch,CURLOPT_SSLKEY,dirname(__FILE__).DIRECTORY_SEPARATOR.'cert'.DIRECTORY_SEPARATOR.'apiclient_key.pem.'.$_W['uniacid']); curl_setopt($ch,CURLOPT_CAINFO,dirname(__FILE__).DIRECTORY_SEPARATOR.'cert'.DIRECTORY_SEPARATOR.'rootca.pem.'.$_W['uniacid']); if( count($aHeader) >= 1 ){ curl_setopt($ch, CURLOPT_HTTPHEADER, $aHeader); } curl_setopt($ch,CURLOPT_POST, 1); curl_setopt($ch,CURLOPT_POSTFIELDS,$vars); $data = curl_exec($ch); if($data){ curl_close($ch); return $data; } else { $error = curl_errno($ch); curl_close($ch); } } function curl_post_ssll($url, $vars, $uniacid, $second=30,$aHeader=array()) { $ch = curl_init(); curl_setopt($ch,CURLOPT_TIMEOUT,$second); curl_setopt($ch,CURLOPT_RETURNTRANSFER, 1); curl_setopt($ch,CURLOPT_URL,$url); curl_setopt($ch,CURLOPT_SSL_VERIFYPEER,false); curl_setopt($ch,CURLOPT_SSL_VERIFYHOST,false); curl_setopt($ch,CURLOPT_SSLCERT,dirname(__FILE__).DIRECTORY_SEPARATOR.'cert'.DIRECTORY_SEPARATOR.'apiclient_cert'.$uniacid.'.pem'); curl_setopt($ch,CURLOPT_SSLKEY,dirname(__FILE__).DIRECTORY_SEPARATOR.'cert'.DIRECTORY_SEPARATOR.'apiclient_key'.$uniacid.'.pem'); curl_setopt($ch,CURLOPT_CAINFO,dirname(__FILE__).DIRECTORY_SEPARATOR.'cert'.DIRECTORY_SEPARATOR.'rootca'.$uniacid.'.pem'); if( count($aHeader) >= 1 ){ curl_setopt($ch, CURLOPT_HTTPHEADER, $aHeader); } curl_setopt($ch,CURLOPT_POST, 1); curl_setopt($ch,CURLOPT_POSTFIELDS,$vars); $data = curl_exec($ch); if($data){ curl_close($ch); return $data; } else { $error = curl_errno($ch); curl_close($ch); return false; } } public function great_rand() { $str = '1234567890abcdefghijklmnopqrstuvwxyz'; $t1=""; for($i=0;$i<30;$i++){ $j=rand(0,35); $t1 = $t1. $str[$j]; } return $t1; } function check_sign_parameters(){ return true; } function sign($content, $key) { if (null == $key) { message('签名key不能为空','','error'); } if (null == $content) { message('签名内容不能为空','','error'); } $signStr = $content . "&key=" . $key; return strtoupper(md5($signStr)); } function setParameter($parameter, $parameterValue) { $this->parameters[CommonUtil::trimString($parameter)] = CommonUtil::trimString($parameterValue); } function getParameter($parameter) { return $this->parameters[$parameter]; } }

?>